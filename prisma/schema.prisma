// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  name              String?
  image             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Orders            Order[]
  cart              Cart?  
  ShippingAddresses ShippingAddress[]
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  totalAmount Float
  status      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sessionId   String
  user        User        @relation(fields: [userId], references: [id])
  Items       OrderItem[]
  payments    Payment[]
}

model OrderItem {
  id        String     @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  order     Order      @relation(fields: [orderId], references: [id])
  product   Product    @relation(fields: [productId], references: [id])
}

model Payment {
  id        String     @id @default(uuid())
  orderId   String
  amount    Float
  method    String
  status    String
  createdAt DateTime   @default(now())
  order     Order      @relation(fields: [orderId], references: [id])
}

model Product {
  id          String     @id @default(uuid())
  priceId     String
  name        String
  expansionName String
  imageUrl    String
  price       Float
  isArchived  Boolean  @default(false)
  stock       Int
  condition   String
  createdAt   DateTime   @default(now())
  orderItems  OrderItem[]
  banners     Banner[]
  category    String  
  cartItems   CartItem[]

  // Add pokemonId as an optional foreign key
  pokemonId   String?  
  pokemon     Pokemon?   @relation(fields: [pokemonId], references: [id])
}

model Pokemon {
  id            String    @id @default(uuid())
  name          String
  number        Int?
  gameName      String
  rarity        String
  expansionName String
  imageUrl      String
  skus          String @db.Text  // Change from VARCHAR(191) to TEXT
  variants      String
  url           String
  clicks        Int
  purchases     Int
  products      Product[]  // One Pok√©mon has many Products
}

model ShippingAddress {
  id        String     @id @default(uuid())
  userId    String
  address   String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
}

model Banner {
  id        String     @id @default(uuid())
  imageUrl  String
  title     String
  link      String
  productId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  product   Product?   @relation(fields: [productId], references: [id])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[] // One-to-many relationship with CartItem
  status    String     @default("active") // e.g., active, completed, etc.

  @@index([userId]) // Index for foreign key
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String   // Foreign key to Cart
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String   // Foreign key to Product
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)

  @@index([cartId])    // Index for cart foreign key
  @@index([productId]) // Index for product foreign key
  @@unique([cartId, productId]) // Composite unique constrain
}
